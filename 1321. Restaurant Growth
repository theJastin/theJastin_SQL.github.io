----------solution1--------------------------------------
WITH TotalEachDay AS
(
    SELECT
         visited_on
        ,SUM(amount) AS total_amount
    FROM Customer
    GROUP BY visited_on
), SevenDaysTotal AS
(
    SELECT
         visited_on
        ,total_amount
        ,LAG(total_amount, 1) OVER (ORDER BY visited_on) AS lag1
        ,LAG(total_amount, 2) OVER (ORDER BY visited_on) AS lag2
        ,LAG(total_amount, 3) OVER (ORDER BY visited_on) AS lag3
        ,LAG(total_amount, 4) OVER (ORDER BY visited_on) AS lag4
        ,LAG(total_amount, 5) OVER (ORDER BY visited_on) AS lag5
        ,LAG(total_amount, 6) OVER (ORDER BY visited_on) AS lag6
    FROM TotalEachDay
)
SELECT 
     visited_on
    ,(total_amount + lag1 + lag2 + lag3 + lag4 + lag5 + lag6) AS amount
    ,ROUND(((total_amount + lag1 + lag2 + lag3 + lag4 + lag5 + lag6)*1.00/7), 2) AS average_amount
FROM SevenDaysTotal
WHERE lag6 IS NOT NULL
ORDER BY visited_on
----------solution2--------------------------------------
WITH TotalEachDay AS
(
    SELECT
         visited_on
        ,SUM(amount) AS total_amount
    FROM Customer
    GROUP BY visited_on
), SevenDaysTotal AS
(
    SELECT
         visited_on
        ,ROW_NUMBER() OVER (ORDER BY visited_on) AS row_num
        ,SUM(total_amount) OVER(ORDER BY visited_on ROWS 6 PRECEDING) AS amount
        ,ROUND(SUM(total_amount) OVER(ORDER BY visited_on ROWS 6 PRECEDING)*1.00/7, 2) AS average_amount
    FROM TotalEachDay
)
SELECT 
     visited_on
    ,amount
    ,average_amount
FROM SevenDaysTotal
WHERE row_num > 6 
ORDER BY visited_on
---------------solution3------------------------------
WITH PrepTable AS
(
    SELECT
        C.customer_id
        ,C.visited_on
        ,SUM(CC.amount) AS sum_amount
    FROM Customer C
        CROSS JOIN Customer CC
    WHERE CC.visited_on BETWEEN DATEADD(day, -6, C.visited_on) AND C.visited_on
    GROUP BY C.customer_id, C.visited_on
    HAVING (SELECT DISTINCT customer_id FROM Customer WHERE visited_on = DATEADD(day, -6, C.visited_on)) IS NOT NULL
)
SELECT
    visited_on
    ,sum_amount as amount
    ,ROUND((sum_amount+0.00)/7, 2) AS average_amount
FROM PrepTable
GROUP BY visited_on, sum_amount
ORDER BY visited_on

// problem
Table: Customer
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| name          | varchar |
| visited_on    | date    |
| amount        | int     |
+---------------+---------+
In SQL,(customer_id, visited_on) is the primary key for this table.
This table contains data about customer transactions in a restaurant.
visited_on is the date on which the customer with ID (customer_id) has visited the restaurant.
amount is the total paid by a customer.

You are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).
Compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). 
average_amount should be rounded to two decimal places.
Return the result table ordered by visited_on in ascending order.
The result format is in the following example.

Example 1:

Input: 
Customer table:
+-------------+--------------+--------------+-------------+
| customer_id | name         | visited_on   | amount      |
+-------------+--------------+--------------+-------------+
| 1           | Jhon         | 2019-01-01   | 100         |
| 2           | Daniel       | 2019-01-02   | 110         |
| 3           | Jade         | 2019-01-03   | 120         |
| 4           | Khaled       | 2019-01-04   | 130         |
| 5           | Winston      | 2019-01-05   | 110         | 
| 6           | Elvis        | 2019-01-06   | 140         | 
| 7           | Anna         | 2019-01-07   | 150         |
| 8           | Maria        | 2019-01-08   | 80          |
| 9           | Jaze         | 2019-01-09   | 110         | 
| 1           | Jhon         | 2019-01-10   | 130         | 
| 3           | Jade         | 2019-01-10   | 150         | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+--------------+----------------+
| visited_on   | amount       | average_amount |
+--------------+--------------+----------------+
| 2019-01-07   | 860          | 122.86         |
| 2019-01-08   | 840          | 120            |
| 2019-01-09   | 840          | 120            |
| 2019-01-10   | 1000         | 142.86         |
+--------------+--------------+----------------+
Explanation: 
1st moving average from 2019-01-01 to 2019-01-07 has an average_amount of (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86
2nd moving average from 2019-01-02 to 2019-01-08 has an average_amount of (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120
3rd moving average from 2019-01-03 to 2019-01-09 has an average_amount of (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120
4th moving average from 2019-01-04 to 2019-01-10 has an average_amount of (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86
