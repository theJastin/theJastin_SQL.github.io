------------------solution1----------------------------------
WITH CTE
AS
(
    SELECT
        Ch.college_id
        ,Ch.challenge_id
        ,(SELECT SUM(total_submissions) FROM submission_stats WHERE challenge_id = Ch.challenge_id) AS sum_total_submissions
        ,(SELECT SUM(total_accepted_submissions) FROM submission_stats WHERE challenge_id = Ch.challenge_id) AS sum_total_accepted_submissions
        ,(SELECT SUM(total_views) FROM view_stats WHERE challenge_id = Ch.challenge_id) AS sum_total_views
        ,(SELECT SUM(total_unique_views) FROM view_stats WHERE challenge_id = Ch.challenge_id) AS sum_total_unique_views
    FROM challenges Ch 
    --WHERE Ch.college_id = 3265
)
SELECT 
     C.contest_id
    ,C.hacker_id
    ,C.name
    ,SUM(sum_total_submissions)
    ,SUM(sum_total_accepted_submissions)
    ,SUM(sum_total_views)
    ,SUM(sum_total_unique_views)
FROM CTE Ch
     INNER JOIN colleges Cl ON Cl.college_id = Ch.college_id
     INNER JOIN contests C ON C.contest_id = Cl.contest_id
GROUP BY C.contest_id, C.hacker_id, C.name
ORDER BY C.contest_id;

----------------------solution2-----------------------------------------
DECLARE @contest_id INT
SET @contest_id = 845;
 
WITH submission_CTE AS
(
    SELECT
        challenge_id
        ,SUM(total_submissions) AS sum_of_total_submissions
        ,SUM(total_accepted_submissions) AS sum_of_total_accepted_submissions
    FROM Submission_Stats
    GROUP BY challenge_id
),
view_CTE AS
(
    SELECT
        challenge_id
        ,SUM(total_views) AS sum_of_total_view
        ,SUM(total_unique_views) AS sum_of_total_unique_views
    FROM View_Stats
    GROUP BY challenge_id
),
college_sums_CTE AS
(
    SELECT 
        Clg.college_id
        ,SUM(sum_of_total_submissions) AS college_total_submissions
        ,SUM(sum_of_total_accepted_submissions) AS college_total_accepted_submissions
        ,SUM(sum_of_total_view) AS college_sum_of_total_view
        ,SUM(sum_of_total_unique_views) AS college_total_unique_views
    FROM Challenges Clg
               LEFT JOIN submission_CTE SCTE ON SCTE.challenge_id = Clg.challenge_id
               LEFT JOIN view_CTE VCTE ON VCTE.challenge_id = Clg.challenge_id
    --WHERE Clg.college_id IN (SELECT college_id FROM Colleges WHERE contest_id = @contest_id)
    GROUP BY  Clg.college_id
),
contests_stat_CTE AS
(
    SELECT
        Con.contest_id
        ,Con.hacker_id
        ,Con.name
        ,SUM(CCTE.college_total_submissions) AS S1 
        ,SUM(CCTE.college_total_accepted_submissions) AS S2
        ,SUM(CCTE.college_sum_of_total_view) AS V1
        ,SUM(CCTE.college_total_unique_views) AS V2
    FROM Colleges Col
               INNER JOIN college_sums_CTE AS CCTE ON CCTE.college_id = Col.college_id
               INNER JOIN Contests Con ON Con.contest_id = Col.contest_id
    GROUP BY Con.contest_id, Con.hacker_id, Con.name
)
SELECT
    *
FROM contests_stat_CTE
WHERE S1 + S2 +V1 + V2 != 0
-------------------------------------------------------------------------------

/* problem
Samantha interviews many candidates from different colleges using coding challenges and contests. 
Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, 
and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are.
Note: A specific contest can be used to screen candidates at more than one college, but each college only holds  screening contest.

The following tables hold interview data:
Contests: The contest_id is the id of the contest, hacker_id is the id of the hacker who created the contest, and name is the name of the hacker. 
Colleges: The college_id is the id of the college, and contest_id is the id of the contest that Samantha used to screen the candidates. 
Challenges: The challenge_id is the id of the challenge that belongs to one of the contests whose contest_id Samantha forgot, and college_id is the id of the college where the challenge was given to candidates. 
View_Stats: The challenge_id is the id of the challenge, total_views is the number of times the challenge was viewed by candidates, and total_unique_views is the number of times the challenge was viewed by unique candidates. 
Submission_Stats: The challenge_id is the id of the challenge, total_submissions is the number of submissions for the challenge, and total_accepted_submission is the number of submissions that achieved full scores. 
*/
