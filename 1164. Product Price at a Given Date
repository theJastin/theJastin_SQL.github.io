-------------------------solution1------------------------------------
/* Write your T-SQL query statement below */
WITH NoChangePrice AS
(
    SELECT
        product_id
        ,10 AS price
    FROM Products P
    GROUP BY product_id
    HAVING MIN(change_date) > '2019-08-16'
),
MaxChangeDate AS
(
    SELECT 
         product_id
        ,MAX(change_date) AS max_change_date
    FROM Products
    WHERE change_date <= '2019-08-16'
    GROUP BY product_id
),
NewPrice AS
(
    SELECT
         M.product_id
        ,P.new_price AS price
    FROM MaxChangeDate M 
         INNER JOIN Products P ON P.product_id = M.product_id AND P.change_date = M.max_change_date
)
SELECT *
FROM NoChangePrice

UNION 

SELECT *
FROM NewPrice
------------------------solution2------------------------------------
WITH NoPriceChangePrepTable AS
(
    SELECT
         *
        ,ROW_NUMBER() OVER(PARTITION BY product_id ORDER BY change_date) AS row_num
    FROM Products
),
NoPriceChangeTable AS
(
    SELECT 
         product_id
        ,10 AS price
    FROM NoPriceChangePrepTable
    WHERE row_num = 1 AND change_date > '2019-08-16'
),
PriceChangedPrepTable AS
(
    SELECT
         *
        ,ROW_NUMBER() OVER(PARTITION BY product_id ORDER BY change_date DESC) AS row_num
    FROM Products
    WHERE change_date <= '2019-08-16'
),
PriceChangedTable AS
(
    SELECT
         product_id
        ,new_price AS price
    FROM PriceChangedPrepTable
    WHERE row_num = 1
)
SELECT *
FROM PriceChangedTable

UNION

SELECT *
FROM NoPriceChangeTable
------------------------ solution3------------------------------------
WITH PrepTable AS
(
    SELECT
        P.product_id
        ,MAX(PP.change_date) as max_change_date
    FROM Products P
        LEFT JOIN Products PP
            ON PP.product_id = P.product_id
                AND PP.change_date <= '2019-08-16'
    GROUP BY P.product_id
)
SELECT
    PT.product_id
    ,COALESCE(P.new_price, 10) AS price
FROM PrepTable PT
     LEFT JOIN Products P
        ON P.product_id = PT.product_id AND P.change_date = PT.max_change_date

// problem
Table: Products
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key (combination of columns with unique values) of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 
Write a solution to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.
Return the result table in any order.
The result format is in the following example.

Example 1:

Input: 
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+
Output: 
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+
